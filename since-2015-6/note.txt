VirtualBox
    virtual box安装ubuntu花屏,重新切换图形显示
    sudo apt-get install virtualbox-guest-dkms重启以支持更高分辨率
    virtualbox用nat连接网络需要做端口转发以登陆进去，或使用bridged network，获得
        本地局域网的ip
    GRUB_CMDLINE_LINUX_DEFAULT=" quiet splash"改成“text”就不再启动X，可以手动
        执行startx来启动图形化
    VBoxManage list vms
    VBoxHeadless -s <Guest-OS-Name>
    给XP共享文件夹，通过Win+E的网络邻居里找，拖拽功能仅支持linux
    ubuntu7.04-server中安装openssh-server需要安装光盘，如果再virtual-box中需要开
        启虚拟光盘，但安装后记得卸掉，不然启动时会从光盘启动（应该可以调启动顺序
        ），还得手动选择从磁盘启动
    获得桥接网卡且headless运行host的ip地址
        for i in {1..254}; do ping -c 1 192.168.178.$i & done
        VBoxManage list runningvms
        VBoxManage showvminfo <vmname>
        arp -a | grep <vmname-mac-addr>

    VBoxManage modifyhd ".......vdi" --resize 81920


sublime：
    "rulers": [80, 120]设置ruler

抓包
    使用tshark -q -r input.pcap -z follow,tcp,ascii,$stream > $stream.txt
        所得为ascii数据，所有非可见字符都使用'.'(0x2E)填充，并非原始数据，因此解压不
        了，使用tcpflow获得的为二进制数据，可以正常解压。使用follow,tcp,hex或者
        follow,tcp,raw获取的数据都是转成hex的，非原始二进制数据，因此都解压不了
    tcpdump
    tcpdump -w xpackets.pcap -i eth0 dst 50.31.164.226 and port 80
        这样只能抓发往50.31.164.226:80的数据，但是response收不到
        要抓response不要指定端口，但这样会把所有的流量都抓住
    tcpdump -tttt -r data.pcap读取已经抓的包
    tcpflow能把.pcap的http包分析出来
    tcpflow/tcpdump都是使用libpcap，expression的格式是一样的：
        expression有一系列primitives组成，通常的primitive包含id和多个前缀qualifiers
        qualifiers包含type/dir/proto，但也有复杂的primitive
        -l Make stdout line buffered
        -A Print each packet (minus its link level header) in ASCII
        -i 指定interface，默认使用‘lowest numbered’
        -n Don't convert host addresses to names
        -X 打印数据in hex and ASCII

获取系统进程状态/参数，与内核通信等
    /proc/pid/statm  /proc/pid/stat  /proc/pid/status查看pid的内存、user、sys时间等
        信息；cpu利用率可通过(user + sys) / clock获得
    /proc/diskstats 2.6的内核可通过该文件获取磁盘利用情况（3以上的内核貌似沿用了2.6的
        设置）
    /prpc/net/dev 网络信息
    读取/proc中的数字目录数获取进程信息
    目前检测内核thread的方法为看comm中是否包含/，该方法并不正确：
        kthreadd (PID 2) has PPID 0 (on Linux 2.6+)
        /proc/*/exe为空
        /proc/*/cmdline空 ，used by ps and top to distinguish kernel threads.
    磁盘信息可用statvfs/statfs获取
    /proc/19873/smaps可获得进程内存占用的PSS指标

    情况linux缓存echo 3 > /proc/sys/vm/drop_caches

    查看进程的线程个数，ps -eo nlwp或者/proc/pid/task或者/proc/pid/status
    已打开的文件列表/proc/<pid>/fd/，进程限制/proc/<pid>/limits

    pctrl可修改进程的/proc/pid/comm|stat中的名称，/proc/pid/cmdline需要修改argv[0]

    grep cgroup /proc/mounts查看cgroup挂载点
    /proc/cgroups列出cgroup子系统
    /proc/<pid>/cgroup查看进程所在cgroup（里面的路径是相对于挂载点的
    每个container都会有一个cgroup，对LXC名称为lxc/<container_name>，老版本是
        <container_name>；对docker为/docker/<longid>/
    cgroup的内存占用需要在内核中开启cgroup_enable=memory swapaccount=1
    内存信息在memory，cpu在cpuacct，时间单位为USER_HZ，为当前已用
    有多少个container通过docker api获取

    /proc/pid/fd中socket中的数为inode，使用该inode可以在/proc/net/[tcp|udp|unix]中寻找该socket的详细信息
        有些可能使用的ipv6

    windows：perfmon工具类似SI

    基本上Windows上所有可监控数据都可通过Performance Counter获取(具体看perfmon)

    GlobalMemoryStatusEx 内存和交换分区（page file）使用
    GetDiskFreeSpaceEx 获得磁盘信息
    磁盘利用通过RegQueryValueEx（HKEY_PERFORMANCE_DATA获取，获得的数据为：
        Performance Data Format
    使用counter-index 200/202/204来获取磁盘利用%也可以（地址是相连的部分，值相
        同），但该值有多个COUNTER（后一个为base-counter，辅助计算），还是
        使用1400/1402/1404来获取
    windows-performance-counter是18-digit Active Directory timestamps, also
        named 'Windows NT time format' and 'Win32 FILETIME or SYSTEMTIME'.
        The timestamp is the number of 100-nanoseconds intervals since Jan 1, 1601 UTC.
    Impersonation and Delegation
    网络数据可通过GetAdaptersInfo和GetIfEntry获得，但MIB_IFROW为32需要处理溢出
        如果要更好的处理可以通过Performance Counter
    使用GetAdaptersInfo获得的name为内部名称，IP_ADAPTER_ADDRESSES可得到friendlyName


windows下编译zlib/curl/sigar库
    ZLIB：windows上incluede zlib.h，默认为__cdecl，使用win32/Makefile.msc编译的也是
        如果使用的是zlibwapi.lib，则需要在include前定义ZLIB_WINAPI切换
        windows上编译zlib，使用win32下的Makefile，在contrib\vstudio目录下有sln工程，但
        编译出来有问题
    CURL：curl默认使用DLL链接，#define CURL_STATICLIB使用静态库，在linux下没有该问题，
        因为linux下不会单独生成一个.lib的文件，.a的符号是与.so的符号是一致的

        使用vs编译curl：winbuild目录下nmake /f Makefile.vc VC=11 mode=static MACHINE=x64
        curlbuild.h为平台相关的内容，该文件并不包含在git代码库中，而在每日的tar.gz中。cmake
            过程中可生成该文件
    SIGAR：sigar在windows上sigar_proc_exe_get引用sigar_proc_exe_wmi_get，而该函数是在
        一个cpp文件内定义的，需要改成c++编译器Properties>C/C++>Advanced>C++ Code(/TP)
        错误为：Native Compiler support only available in C++ compiler


Wix
    RemoveFolder不指定Directory默认为起父目录，如果有多个父目录报not listed in
        the RemoveFile table.
    Wix里的NOT Installed指的是当前程序还未安装过
    没有权限启动service设置Account="LocalSystem"，当程序不能运行也会报这个错误，
        如缺少DLL等
    本地化通过 -cultures:zh-CN设置，本地化文件.wxl通过-loc设置
    “另一个版本已经安装，先卸载”问题，是Product设置了GUID的问题，设置成*
    AllowSameVersionUpgrades设置成yes，这样同版本安装才不会成为两个，而是当作升级
    candle中定义变量-dMyVariable="Hello World"
    由于WindowsInstall非事件驱动，根据输入enable下一步并不会自动刷新，需要切换
        dialog才能刷新，但licenseAgreement界面的checkbox可以
    调试DLL的CustomAction可以在DLL前搞个MessageBox，然后附加调试，或者使用MsiBreak
    DLL默认导出的符号有Decoration，在wix中使用时需要保持符号名称在DLL中存在，因
        此最好使用上面的方法将其Decoration去掉
    KeyPath用于表示一个component，WindowsInstall使用其对应资源确定该Component是
        否损坏和需要修复，因此最好的做法是一个文件一个component这样当文件丢失时，
        WI可以修复，如果多个文件，但KeyPath文件存在WI会认为其没有损坏
    如果添加到Programs的folder内容为空，Wix不会生成该目录，至少要一个item才行，
        可以使用CreateFolder创建空目录，但不能创建空文件
    AO_WixUI_FeatureTree的Back最高的order为2，要想覆盖该设置需要设置更高的order
    customaction设置了sequence后仍是随机执行的，不保证顺序
    Wix使用IniFile可直接更改Ini文件，可在安装过程中修改，可避免用customAction输
        出到ini文件带来的权限及顺序问题，Ini修改应该是在安装Component过程中进行
        的，且在StartService之前。类似的，Wix也支持对xml格式的配置进行设置
    CustomAction如果需要权限应设置Execute="deferred"或者Commit且Impersonate="no"
    Advertised只有个feature可用，但是并没安装，当用户想使用时（点击快捷方式）再
        安装，而non-advertised则是直接安装上
    WindowsInstall定义了一些Property（变量，比如CommonAppDataFolder等），wix本
        身也有些Built-in Variables，两者有重复
    Wix中的变量必须要加var.前缀才能访问


    candle的-arch会设置sys.BUILDARCH和sys.PLATFORM，默认为x86，如果该设置与
        ProgramFiles目录设置不匹配会报error，因此ProgramFiles需要根据arch设置，
        如果安装包里既有32又有64，可用component的Win64属性设置
    Package的Platform属性也可以设置arch，但推荐使用-arch


WSGI uWSGI WebDAV
    WSGI，web-server与python应用之间的接口
    uWSGI
    以下均为协议：
        uwsgi（uWSGI server实现的用于传输数据的binary协议，可以用来传输HTTP请求
        scgi（sinple cgi）
        fastcgi
    WebDAV：Web distributed Authoring and Versioning，类似ftp
        类似ftp，但相比ftp，WebDAV有HTTP的一切好处（基于HTTP），如加密、认证、压缩、
            保持连接，传大量小文件较快
        SFTP也有如加密、认证等等功能


curl
    curl --unix-socket 7.40以后支持
    curl: (48) An unknown option was passed in to libcurl，curl正确，但libcurl版本
        不正确，使用ldd看看是否使用了正确的libcurl库
    curl默认使用strlen计算content-length，如果想发送binary，需要使用CURLOPT_POSTFIELDSIZE
    curl的proxy username/password仅需要对':'做encode。

    编译带ssl的curl./configure LIBS=-ldl --prefix=/root/code/curl64 --with-ssl=/root/code/openssl64/
        --disable-ldap --without-libidn --enable-shared=no
        disable-ldap后configure报找不到ssl，其实是没有加-ldl，一定要使用disable-ldap
        使用without-ldap，在curl发现有系统库后仍会使用ldap

    ignore_expect_100 on不然带expect的报The requested URL could not be retrieved
    这个不管用server_http11 on
    这个问题应是由于curl默认使用HTTP/1.1导致的，下版改成HTTP/1.0

    CURLOPT_SSL_VERIFYPEER 是否verify perr的certificate


Windows配置及工具使用
    appwiz.cpl打开卸载程序
    控制面板对应的命令为control

    tasklist /m blueware.profile.dll查看是否有进程加载该dll
    dumpbin /all 在.text段可看到IL code使用RVA查看方法体
    dumpbin /headers查看64或者86
    nmake里的macro类似make里的variable，引用方法也相同，大小写敏感，需要注意的是nmake
        本身的关键词是大小写不敏感的
    vs中ERR, hr可查看上一个错误
    gacutil -i <> 安装某个.net的DLL，有时.net的msi安装包安装不上，有时报找不到
        某个库的某个符号，但该版本的DLL都是正确的，原因有可能为该DLL未注册上
    解压msi包：msiexec /a /path/to/msi /qb TARGETDIR=/absolute/extract/path

    windows xp系统名称里，只要没写64那就是32
    vc++2012编译的程序在xp上报：Invalid win32 application.安装vs2012 update1/3/4
        安装update2貌似不行，然后在项目属性General -> Platform toolset里选择v110_xp
    Tools – Options – Projects and Solutions – 取消打开错误列表选项.
    vs2012 solution explorer有个预览，关闭就可以取消在右边打开文件

    windows本地策略->审核策略->开启登陆审核，这样才会记录错误登陆事件
    键盘按键慢，可设置键盘的字符重复速度

    Project Settings -> Configuration Properties -> C/C++ -> Advanced -> Show Includes
        查看include-tree
    sc create MathsService binPath= %SYSTEMROOT%\System32\Maths.exe type= own type=
        interact start= demand DisplayName= "My fabulous Maths service"
        安装service
    msiexec安装程序，/i /x /l*(输出日志)，可查看帮助看看
    net start/stop和sc start/stop都可用来管理服务，但sc直接返回不会等待启动完成

    在notepad++中查找unicode字符[^\x00-\x7F]，vs的warning C4819


bat脚本
    变量赋值set xxx=yyy等号前面的空格会被当成变量名，后面的空格会被当作值
        因此需要注意，引用改变量使用%xxx%
    if不支持 and or，需要自行实现
    goto标签的冒号在前面
    查看帮助，直接在cmd里输入if /?
    echo.才能输出空行，否则只是显示是否处于打开状态
    %~dp0，可以参考for /?

    "echo."可以打印字符串，"."后面的都会被打印出来
    当前路径为%~dp0
    cmd里的函数用goto标签实现，函数结束为goto:eof，然后call标签就行
    exit默认会连上层cmd一块退出，使用exit /B
    cmd里的注释使用"::"，设置变量使用set xxx=yyy，然后通过%xxx%引用

    避免某个bat影响当前环境，使用setlocal/endlocal
    setlocal
    call %VS100COMNTOOLS%vsvars32.bat
    devenv myProject.sln /Build "Debug|Win32"
    endlocal

    将命令的输出作为变量值：
    for按行处理，但以下语句得到的是第一个token
    for /f "delims=v-" %%i in ('git describe --tag --long') do set OA_VERSION=%%i

windows编程
    strcasecmp最初出现在string.h，glibc中有，但posix标准将其定义在strings.h中
    snprintf保证最后一个字符为0，windows下的_snprintf不保证这点
    windows上的select中至少有一个fd-set必须不为null，且还得有至少一个handle，因
        此用来不好用来实现nanosleep
    __impl__是windows的动态库链接用lib的符号前缀
    DLL导出的符号必须要__declspec(dllexport)、#progma(linker)或者使用DEF表
    __stdcall即WINAPI，由callee释放栈，不适合变长参数函数，这类使用__cdecl
    Windows下DLL会在PATH目录中搜索，优先级稍微靠后

    忽略编译警告：c/c++高级，忽略特定警告（只有数字，不包含前面的c）
    忽略链接警告，在所有选项的命令行里：/ignore:4099，但是4099被标定为不可忽略。。
    4244;4018;4267
    nmake里INCLUDE 和LIB都是预设好的指向vs目录的，覆盖后会提示找不到头文件等错误

    在命令行里使用v110_xp除了要使用vcvarsall还要设置INCLUDE/PATH/LIB/CL/LINK等变量，
        并在编译时添加/D_USING_V110_SDK71_(设置了CL貌似就不用了)
    cmd在if里设置环境变量如果存在带空格路径会报错，在if外就没事

`terminal`的输出变乱（按回车会打印PS1但并不换行，输入也不显示），是`echo`被关闭导致,可使用`reset`，或`stty echo`打开echo（`stty -echo`用来关闭echo）


杂项
    DistroWatch可查看个linux/bsd发行版携带的软件版本情况，及其他各类信息
    Ini文件里如果不指定Section，那就是Global，但仅对第一个section前的部分
    %22 %5B %5D %2F，对应"[]/。为其hex值



iptables
    iptables/netfilter is the userspace/kernel module

    tables->table->chains->rule->target(action)
    rule从上到下匹配，第一个匹配后停止，无匹配使用默认

    lsmod | grep ip_tables
    rpm -q iptables

    iptables -nL --line-numbers

    iptables -D chain rulenum删除chain中的rule或某个reference
    iptables -X chain 仅当无reference
    iptables -F [chain] 删除所有rule，不加chain则flush所有chain

    iptables -N LOGGING
    iptables -A INPUT -j LOGGING
    iptables -A OUTPUT -j LOGGING
    iptables -A LOGGING -j LOG -m limit --limit 2/min --log-prefix "Dropped: " --log-level 4

    允许访问mysql，使用insert放在reject前
    iptables -I RH-Firewall-1-INPUT 9 -p tcp -m tcp --dport 3306 -j ACCEPT

    配置iptables和selinux：system-config-securitylevel
    保持iptables：service iptables save

    /etc/syslog.conf  kern.warning   /var/log/custom.log
    /etc/sysconfig/iptables

linux命令使用
    sudo apt-get install openssh-server支持ssh登陆
    让ssh保持连接，在/etc/ssh/sshd_config中添加
        ClientAliveInterval 30
        ClientAliveCountMax 5
    ssh-keygen -t rsa -b 4096 -C "your_email@example.com"
    ssh-keygen -y -f ~/.ssh/id_rsa > ~/.ssh/id_rsa.pub, 从私钥获得公钥
    ssh可信登陆需要在目标主机中添加本主机的公钥，一般在~/.ssh/authorized_keys
    互信登陆只需要编写~/.ssh/authorized_keys就可以

    ubuntu开启root的ssh登陆
        sudo passwd root
        sudo passwd -u root
        /etc/ssh/sshd_config中的PermitRootLogin设为yes
        service ssh restart

    nice命令可修正程序優先級（仅是指导性的），默认为10
        优先级范围为[-20~19]，越小越高
        程序的nice为指导性修正值，一般都是0
    ntpdate使用NTP协议获取时间
    free中的-+部分，对应实际占用
    jobs/disown/fg/bg/跟作业管理相关，disown解除关系（不再在shell接受到HUP时向该进程发
        送HUP）,使用时jobspec需要加前缀%
        先将作业stop（Ctrl-z）然后bg即可将作业放置后台
    查看sector size：sudo hdparm -I /dev/sda | grep -i physical
        sudo fdisk -l

    重启网络ifdown/ifup，/etc/init.d/networking restart是重启所有网络
    ip link set eth0 promisc on
    ip link set eth0 multicast off
    strace防止参数被truncate，-s strsize。-o outfile

    id获取用户id（root为0）
    $$当前进程pid
    ${varname:=value}值未设置或为空时设为value
    ${varname=value}值未设置时设为value
    上面两个命令前面加：避免bash把结果当命令执行
    bash里的变量一旦设置就是全局的，只有加前缀local的为临时变量
    tmp=${var-text}当var未设置或为空使用text
    bash中子进程不能修改父进程中的变量，是两份变量，比如管道
    ps按命令查找pid，ps -o pid= -C php-fpm
    ps过滤进程，-p 2，-u root，跟-e冲突
    sh里没有trap ERR，bash里有，可以用来在某条命令出错时执行
    Makefile里执行shell：$(shell <command>)
    >/dev/null 2>&1 顺序反了不行. 或者使用 &>/dev/null
    declare -a Array=($server)使用IFS分割生成数组，访问方法：${Array[0]}
    cut -c -10,14-
    grep -w可以按word搜索
    grep -r $'\r' *  $'' for c-style escape in Bash
    grep -axv '.*' file搜索非utf8字符  -x 进匹配，-v反转
    awk -F'\t' '{sum+=$3} END { print "Average = ",sum/NR}' < file.log
    awk '{if(min==""){min=max=$1}; if($1>max) {max=$1}; if($1< min) {min=$1}; total+=$1; count+=1} END {print total/count, min, max}' FILE.DAT

    find命令可以使用and or !连接各个过滤选项

    文件的s表示secure deletion，文件删除时会将对应磁盘块清零
    netstat -rn可查看gateway
    netstat -i查看网络状态，P表示Promiscuous


    LVM: logical volume management
        VG: volume group     vg*  vgdisplay/vgextend等命令
        PV: physical volumn  pv*  pvdisplay/pvextend等命令
        LV: logical volumn   lv*  lvdisplay/lvextend等命令
        LV上扩展fs   resize2fs
        空间分配时首先需要将物理分区添加到PV，然后将PV加到VG中，然后LV从VG中申请空
            间，之后在LV上创建文件系统，但PV一旦放到VG中，再更改大小是不会显现的，
            可以添加新的PV
        PV必须时Linux LVM类型的文件系统，为主分区，使用fdisk设置t为8e
        这种方式只能在已经使用LVM的文件系统上，如果一开始不是，只能新创建一个文件系统，然后
            mount到对应位置，当然如果磁盘上当前分区后面有连续空间，应该是能直接扩展的
    df -T 查看文件系统类型
    fdisk -l查看所有物理分区

    centos下设置static ip
        ip,mask,类型：/etc/sysconfig/network-scripts/ifcfg-eth0
        gateway：/etc/sysconfig/network
        DNS: /etc/resolv.conf
        修改后执行/etc/init.d/network restart

    unlink可以删除已打开的文件，若有其他进程打开了该文件，该文件将继续存在并占用磁盘空间
        直到关闭，但此时其他进程可以创建一个同名文件，这两个文件有不同的inode

    需要xshell设置为ANSI色彩
    设置256色 export TERM='xterm-color'
    查看色彩数：tput colors

    make SHELL='sh -x'
    make VERBOSE=1

    valgrind如果进程再目录没权限就无法创建结果log，如php-fpm/nginx/httpd都会使用单独账户运行
    对带有循环调用的函数，不易做profiling

    hostname不一定带domainname，使用hostname -A/-f可查看完整hostname，httpd使用该hostname作为配置
        -s查看缩短的

    systemtap、dtrace，strace，ptrace为内核trace相关，也可以处理上层应用
    valgrind为动态程序分析，需要将程序运行于valgrind的VM中，相比于静态程序分析而言

    httpd无法访问/tmp目录下的文件，提示找不到，但是文件是存在的
        原因：由于安全问题，systemd可以为httpd配置PrivateTmp，即在/var/tmp下生成独立的/tmp文件夹
        将/usr/lib/systemd/system中有关httpd的PrivateTmp设为false，然后systemctl daemon-reload
        即可关闭该选项

    getenforce/setenforce控制SELinux，centos默认开启，ubuntu默认关闭
    fuser file_name  查看谁在使用某个文件
    enca filename查看文件编码
    enconv -L zh_CN -x UTF-8 filename转换编码
    iconv -f encoding -t encoding inputfile
    convmv -f UTF-8 -t GBK -notest filename 文件名编码转换
    ipcs/ipcrm查看和控制 XSI message queue, semaphore set, or shared memory segment identifier

    date +'%:z %Z'  或者  date -R获得时区
    /etc/localtime  centos下使用该文件控制时区，需要从/usr/share/zoneinfo/拷贝或ln过来以更改时区
    /etc/sysconfig/clock
    /etc/timezone
    /usr/share/zoneinfo/
    更新时间 ntpdate time.windows.com
    查看主机时间是否存在误差timedatectl status（老的系统版本不自带）

    在ubuntu15.04中使用text模式
    /etc/default/grub  GRUB_CMDLINE_LINUX_DEFAULT="text"
    sudo update-grub
    对使用systemd（Ubuntu 15.04）的系统还要禁用graphical login manager:
        sudo systemctl enable multi-user.target --force
        sudo systemctl set-default multi-user.target

    自启动服务
        SystemV：update-rc.d(ubuntu)/chkconfig(centos)
            在/etc/rc.d目录创建/etc/init.d的链接
            [KS][number]xxxxxx  K kill, S start, number为优先级
        Upstart：使用initctl
            /etc/init/service.conf和/etc/init.service.override
        systemd：使用systemctl
            /etc/systemd/system/multi-user.target.wants/service.service
            然后enable一下：systemctl enable service.service
        ubuntu从6.10启用upstart，15.04启用systemd
        service脚本可用来控制SystemV（有些版本也支持upstart服务，但是--status-all只显示SystemV的）

    /etc/sudoers包含了sudo的相关信息

    ssh
        -f可以让ssh在执行命令前进入后台，但这样本地会多出一个ssh进程
        ssh  root@10.128.6.234 'sleep 300&'会导致本地stuck，因为stdout还
            与远端的ssh保持连接中，使用nohup同样会保持stdout因此也不行
        ssh  root@10.128.6.234 'sleep 300 2>/dev/null &'本地也会stuck
        ssh  root@10.128.6.234 'sleep 300 >/dev/null &'可断开

        PS：远程运行locust（python脚本）时必须同时重定向stderr，否则程序起不来，原因未知



jenkins
    使用windows部署jenkins，需要能通过PATH找到git，并能让git使用.ssh无密码访问代码库
        git会在HOME目录下寻找.ssh，如果没有设置回事系统默认值（这个默认值在windows上未知）

    jenkins中配置发送html邮件，主要有些子配置如果更改了默认邮件类型，需要单独配
        <a href="${BUILD_URL}">${BUILD_URL}</a>
        ${FILE,path="tests/daemon_cov.html"}
        ${BUILD_LOG}

Taint checking/trademarking
DMI Desktop Management Interface; SMBIOS, System Management BIOS

ssh-keygen -lf显示fingerprint

abrt会收集bug crash，生成core文件，但仅收集yum安装的包，设置/etc/abrt/*.conf中的
    ProcessUnpackaged = no可以允许其他程序生成core（因为abrt会接管系统的core生成）
    abrt运行时，sysctl -a|grep core_pattern，以'|'开头

grep -F不使用regexp，和xargs一起使用需要用-e否则不会执行
awk print可打印该行

head/tail -n参数可以使用+/-设置从第K开始

ps axfo pid,comm树形结构显示，BSD风格的命令行
    ps --forest -eo pid,comm POSIX风格

cat > a.txt << EOF, 这样可以将cat的输出放到文件，重定向输出放到结果不管用

~/.bashrc ~/.bash_profile /etc/bashrc /etc/profile之间的关系
    chroot时/etc/bashrc没被读取，但是~/.bashrc被读取了

chroot时提示找不到/bin/bash，实际为该程序的ld.so不存在
chroot环境下不会自动创建dev设备，如果某程序需要，可自行创建，或者使用mount bind宿主机的dev
    mknod -m 0666 dev/null c 1 3
    mknod -m 0666 dev/random c 1 8
    mknod -m 0444 dev/urandom c 1 9

    mount -bind /dev /mnt/newroot/dev


vmstat -Sn --stats查看memory,swap,io, etc..

bash里\[\]用来表示non-printable字符的开始结束，否则针对过长的命令，会导致bash不能正确显示输入
    对应到ascii代码为\001和\002，在不能使用\[\]的情况可以使用这两个，如gdb prompt
bash里面$!表示上条后台命令的pid

bash里不容易写if，但是可以使用：run_aaa || exit来作为替代
bash用for循环解析空格分割的字符串：
    有效：var="aa abb"; for i in $var; do echo "$i"; done
        使用Makefile的变量也不行，需要复制过来
        Makefile里用$$来引用bash变量
    无效：for i in "aa abb"; do echo "$i"; done
    无效：var="aa abb"; for i in "$var"; do echo "$i"; done

    对文件内每一行
    cat peptides.txt | while read line
    do
       # do something with $line here
    done

    迭代数组for fname in a.txt b.txt c.txt
    for file in *.jtl; do
        wc -l $file |cut -d' ' -f 1 | awk '{print "'${file}'  "  $0/600.0}';
    done

    bash里的strstr：if [[ ${image_name} == *"apache"* ]];

diff --brief -r dir1/ dir2/

gdb处理宏，make KCFLAGS=-ggdb3
    macro expand task_is_stopped_or_traced(init_task)
    info macro task_is_stopped_or_traced
GNU版本的cp带--parents选项，可以自动创建目录

pthread_cleanup_push/pop
pthread_cond_wait调用完仍然是可以cancel的，应该是用信号实现的
    cancel时不消耗cond的signal计数

condition move固定损耗，而branch predicting在大概率失败时会对性能造成很大影响

disassemble 查看汇编 /m /r

查看是否chroot：/proc/<pid>/root，值为/表示没有chroot

chroot为/a/b/c后的进程A，如果连接/etc/file.sock 进程B监听/a/b/c/etc/file.sock
    这样是可以正常连接的

Provisioner - is something doing provision - in docker installing, running, pulling containers.

Provider - is something that runs the VM. I.e. VBox runs the ubuntu OS image.

docker and vagrant, They are very much complimentary.

gg=G vi中格式化代码

gettimeofday/time获取的时间既是UTC时间，不分时区，需要使用其他接口转成本地时间
C里面opaque pointer: typedef struct pmpi_s *pmpi;

readelf -s --wide

stub为依赖的函数提供伪实现，都不一定被调用。mock可以提供伪结果，且验证结果，验证调用
    这样看来daemon写的都是stub，而不是mock

unix-socket如果文件存在，bind会提示INUSE，另外该文件在试用期间不能随意删除，否则其他进程连不上
    使用文件权限设置连接权限，根据需要需要设定umask或者设定文件mode

获得IP地址 getent hosts <hostname>
badboy
    Assertion这个功能挺有意思
    Request Mode and Navigation Mode（Ctrl+Alt）
    Loop功能

Memory ordering describes the order of accesses to computer memory by a CPU. The term can refer either to the memory ordering generated by the compiler during compile time, or to the memory ordering generated by a CPU during runtime.

Memory model allow programmers to reason about the correctness of their programs, it also help programmer get most out the performance optimizations modern multi-core systems  can make.
A memory model is a specification that shows the allowed behavior of multi-threaded programs running on shared memory , multi core processors so programmer know what to expect when writing programs on these systems, the behavior is defined simply  in terms of memory reads and writes of memory locations  without any references to caches or memory subsystems.



在x86上下面的程序会产生r0 = r1 = 0的情况，从结构上是由于Store-buffer，也可以逻辑上从CPU memory
    ordering来理解
    或者这么说，这是由于Store-buffer，使得第二次的读取等同于在写入前面（memory ordering)
CORE-0                                CORE-1
x = 1                                 y = 1
asm volatile ("" ::: "memory");       asm volatile ("" ::: "memory");
r0 = y                                r1 = x


A strong hardware memory model is one in which every machine instruction comes implicitly with acquire and release semantics. As a result, when one CPU core performs a sequence of writes, every other CPU core sees those values change in the same order that they were written.
在ARM下，B核看到的store顺序与A核执行顺序未必一致
TSO stands for “total store order”

Memory barrier type：
    LoadLoad StoreStore
    LoadStore StoreLoad


'next' was not declared in this scope, and no declarations were found by argument-dependent lookup at the point of instantiation [-fpermissive],可以添加-fpermissive或者添加this->

-E -P可以去掉行号


linux-windows迁移，可通过FD_SETSIZE设置select支持的socket数目，这需要在引入
    winsock2.h的头文件前添加，可通过工程或makefile设置-DFD_SETSIZE=xxxx
    https://msdn.microsoft.com/zh-cn/library/windows/desktop/ms739169(v=vs.85).aspx

windows上如果一个extern符号设置错了,比如使用阶段，但设置了__declspec(export)
    这就会导致linker找不到符号，因为linker会尝试在本地代码中寻找符号
    相比起来linux并不把符号绑定到某个库上，.so在链接阶段并不会去解析外部符号
    而是推迟到load阶段，但windows上强制在链接阶段必须指定lib(对应的DLL)


-DskipTests这个只是skip执行，还是会编译
mvn clean install -Dmaven.test.skip=true

有些机器的ssh可能默认不开启publickey认证，这时配置私钥是不起作用的

unzip -d <dst-dir> -o : 自动覆盖，没有force，需要使用-o

思考的列表：
    一条方案未必是死胡同，可以继续按动态和静态两条线继续思考

yum --nogpgcheck

pthread_mutex_lock/unlock隐含memory barriar操作

dwarf调试符号格式，linux目前的默认格式为dwarf2或者dwarf4的格式

Linux tracers
    以下trace都可以在程序运行中获取数据

    strace系统调用，可以抓正在运行的程序
        使用ptrace接口，需要暂停被trace的进程
    ltrace，可以trace库函数
    ftrace是一个kernel subsystem，类似dtrace
    perf_events
    eBPF
    SystemTap
    LTTng
    ktap
    sysdig

    gdb/strace/ltrace都使用ptrace API

    应用的kernel技术: kprobes/utrace/uprobes

pkg-config - Return metainformation about installed libraries
    默认在/usr/lib/pkgconfig, /usr/share/pkgconfig, /usr/local/lib/pkgconfig and /usr/local/share/pkgconfig搜索
    也可以用PKG_CONFIG_PATH配置

.so中的符号是lazy处理，只在使用时才取resolve？？
有时有些so报undefined symbols，使用-Wl,--unresolved-symbols=xxx链接通过后的程序照样运行
    比如libgrpc.so.0包含对CRYPTO_free的外部引用，但是ldd中并不依赖ssl库，可能也是忽略掉了

update-alternatives - maintain symbolic links determining default commands,
    比如在多个JDK版本中切换，针对java/javac需要单独切换
    update-alternatives --config java

使用双引号，要转义$
ssh root@server "ps uax|grep bac | grep -v grep | awk '{ print \$2 }' > /tmp/back.tmp"


sort -k 3 -n 按第3列，按照数字方式排序

更新cpu microcode：microcode_ctl

weblogic非常慢，添加-Djava.security.egd=file:/dev/./urandom选项




VNC centos7
    https://linux.cn/article-5335-1.html
    yum groupinstall "X Window System"
    yum install gnome-classic-session gnome-terminal nautilus-open-terminal control-center liberation-mono-fonts
    unlink /etc/systemd/system/default.target
    ln -sf /lib/systemd/system/graphical.target /etc/systemd/system/default.target
    reboot
    yum install tigervnc-server -y
    vncserver
    vncserver -kill :number (通过ps可看到)

Automatic Bug Reporting Tool, commonly abbreviated as ABRT
    进程崩溃后会写core文件，并在/var/log/messages里写入信息
    对于“Package 'jdk' isn't signed with proper key“，需要：
        Edit the file /etc/abrt/abrt-action-save-package-data.conf
        Set OpenGPGCheck = no
        Reload abrtd with the command: service abrtd reload

info symbol


yum provides \*/Intrinsic.h